"""This project is a part of Blekinge institute of technology's 
assignment all code is developed by jakob029 & FilipDar."""

import re
import requests


def get_structured_training_data(exercise: str) -> dict:
    """Exercises to pick from: 'bench-press', 'squat', 'deadlift',
    'shoulder-press', 'dumbbell-bench-press', 'pull-ups',
    'dumbbell-curl', 'barbell-curl', 'push-ups', 'sled-leg-press',
    'dumbbell-shoulder-press', 'bent-over-row', 'incline-bench-press',
    'incline-dumbbell-bench-press', 'front-squat', 'lat-pulldown'

    """
    session = requests.session()
    c = session.get(f"https://strengthlevel.com/strength-standards/{exercise}/kg")

    a = r"<tr><td>[0-9]*</td><td>[0-9]*</td><td>[0-9]*</td><td>[0-9]*</td><td>[0-9]*</td><td>[0-9]*</td></tr>"

    strenght_tables = re.findall(a, c.text)
    table_types = ["Men bodyweight", "Men age", "Female bodyweight", "Female age"]

    types_index = -1
    prev_row = 10000

    json_data = {}
    for table_type in table_types:
        json_data[table_type] = []

    for row in strenght_tables:
        parced_row = re.findall(r"[0-9]+", row)
        if int(parced_row[0]) < prev_row:
            types_index += 1
        prev_row = int(parced_row[0])
        json_data[table_types[types_index]].append(
            {int(parced_row[0]): [int(weight) for weight in parced_row[1:]]}
        )

    return json_data


def get_average_per_class(request_type: str, structured_training_data: dict) -> list:
    """Get a list of average values for some specific type.
    Args:
        request_type: 'Men bodyweight', 'Men age', 'Female bodyweight' or 'Female age'.
        structured_training_data: Some dict generated by get_structured_training_data.
    Returns:
        List containing tuples with structure (<age or bodyweight>, <average lift>
        , <1 standard deviation>)
        where the <age or bodyweight> is dependent on the 'request_type' arg.
    """
    value_list = []
    allowed_request_types = [
        "Men bodyweight",
        "Men age",
        "Female bodyweight",
        "Female age",
    ]
    if request_type not in allowed_request_types:
        return value_list

    for data_section in structured_training_data[request_type]:
        x_value = list(data_section.keys())[0]
        y_value = data_section[x_value][2]
        z_value = (data_section[x_value][3] - y_value) / 0.84
        value_list.append((x_value, y_value, z_value))

    return value_list
